// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	dtos "book/internal/dtos"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Author provides a mock function with given fields: id
func (_m *UseCase) Author(id int) *dtos.BookAuthorResponse {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Author")
	}

	var r0 *dtos.BookAuthorResponse
	if rf, ok := ret.Get(0).(func(int) *dtos.BookAuthorResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.BookAuthorResponse)
		}
	}

	return r0
}

// Book provides a mock function with given fields: ctx, uuid
func (_m *UseCase) Book(ctx context.Context, uuid string) (*dtos.BookResponse, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Book")
	}

	var r0 *dtos.BookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dtos.BookResponse, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dtos.BookResponse); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.BookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BookFile provides a mock function with given fields: ctx, payload
func (_m *UseCase) BookFile(ctx context.Context, payload dtos.BookFileRequest) (*dtos.BookFileResponse, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for BookFile")
	}

	var r0 *dtos.BookFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dtos.BookFileRequest) (*dtos.BookFileResponse, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dtos.BookFileRequest) *dtos.BookFileResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.BookFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dtos.BookFileRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Books provides a mock function with given fields: ctx, payload
func (_m *UseCase) Books(ctx context.Context, payload *dtos.BooksRequest) (*dtos.BooksResponse, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for Books")
	}

	var r0 *dtos.BooksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.BooksRequest) (*dtos.BooksResponse, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.BooksRequest) *dtos.BooksResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.BooksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dtos.BooksRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBook provides a mock function with given fields: ctx, payload
func (_m *UseCase) CreateBook(ctx context.Context, payload *dtos.CreateBookRequest) (*dtos.CreateBookResponse, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 *dtos.CreateBookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.CreateBookRequest) (*dtos.CreateBookResponse, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.CreateBookRequest) *dtos.CreateBookResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CreateBookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dtos.CreateBookRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
