package bookhandlers

import (
	"book/internal/delivery/http/request"
	"book/internal/delivery/http/response"
	"book/internal/dtos"
	"book/internal/errors"
	"book/web/templates"
	"errors"
	"net/http"
	"strconv"
)

// todo delete
//func parseQuery(query *url.URL, keys ...string) map[string]interface{} {
//	queryList := make(map[string]interface{}, len(keys))
//	re := regexp.MustCompile(`^-?\d+(\.\d+)?$`)
//	for _, key := range keys {
//		val := query.Query().Get(key)
//		if re.MatchString(val) {
//			strconv.Atoi(val)
//		}
//		queryList[key] = val
//	}
//
//	return queryList
//}

func (h *bookHandlers) Book(w http.ResponseWriter, r *http.Request) {
	// todo chi.Parse
	// get book UUID from url

	//parts := strings.Split(r.URL.Path, "/")
	//uuid := parts[len(parts)-1]
	uuid := request.URLParse(r, "uuid")

	book, err := h.useCase.Book(r.Context(), uuid)
	if err != nil {
		switch {
		case errors.Is(err, apperrors.ErrBookNotFound):
			response.Redirect(w, r, h.cfg.NotFoundURL())
			return
		}
		response.Error(w, err, http.StatusInternalServerError)
		return
	}

	bookTempl := templates.Book(*book)
	templ := templates.Layout(bookTempl, book.Title)
	err = templ.Render(r.Context(), w)
	if err != nil {
		response.Error(w, err, http.StatusInternalServerError)
		return
	}

	// response.Success(w, book, JSON)
}

func (h *bookHandlers) Books(w http.ResponseWriter, r *http.Request) {
	const op = "Books"

	pageStr := r.URL.Query().Get("page")
	if pageStr == "" {
		pageStr = h.cfg.BooksPageNumber()
	}

	limitStr := r.URL.Query().Get("limit")
	if limitStr == "" {
		limitStr = h.cfg.BooksLimit()
	}

	page, err := strconv.Atoi(pageStr)
	if err != nil {
		response.Error(w, err, http.StatusBadRequest)
		return
	}

	limit, err := strconv.Atoi(limitStr)
	if err != nil {
		response.Error(w, err, http.StatusBadRequest)
		return
	}

	var payload = dtos.BooksRequest{Limit: limit, Page: page}

	// todo handle error
	books, err := h.useCase.Books(r.Context(), payload)
	if err != nil {
		switch {
		// todo refactor and check how it work
		case errors.Is(err, apperrors.ErrPageNotFound):
			response.Redirect(w, r, NewPath(r, "page", h.cfg.BooksPageNumber()))
			return
		}
		response.Error(w, err, http.StatusInternalServerError)
		return
	}

	bookTempl := templates.Books(*books, page)
	temp := templates.Layout(bookTempl, "Books")
	err = temp.Render(r.Context(), w)
	if err != nil {
		// todo handle error
	}
}

// todo подумать про указатели
func NewPath(r *http.Request, key string, val string) string {
	query := r.URL.Query()
	query.Set(key, val)
	r.URL.RawQuery = query.Encode()
	return r.URL.String()
}

